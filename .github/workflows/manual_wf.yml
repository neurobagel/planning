name: Manual Sync of labels
on:
  workflow_dispatch

jobs:
  get_labels:
    name: Get all labels
    runs-on: ubuntu-latest
    outputs:
      labels: ${{ steps.get_labels.outputs.labels }}
    steps:
      - id: get_labels
        env:
          GH_TOKEN: ${{ github.TOKEN }}
          MAX_LABEL: 100
        run: |
          label_list=[$(gh label list -R neurobagel/planning -L ${MAX_LABEL} --json name | jq '.[].name' | jq -s -r @csv)]
          echo labels: ${label_list}
          echo "labels=${label_list}" >> $GITHUB_OUTPUT

  sync_labels:
    name: Process all the labels
    runs-on: ubuntu-latest
    needs: get_labels
    env:
      GH_TOKEN: ${{ secrets.LAB_PAT }}
    strategy:
      matrix:
        label: ${{fromJSON(needs.get_labels.outputs.labels)}}
    steps:
      - name: read label details
        id: read_label
        run: |
            # TODO replace hardcoded owner and repo with variables. But note that GITHUB_REPOSITORY
            # in https://docs.github.com/en/actions/learn-github-actions/variables#default-environment-variables
            # contains both owner and repo: neurobagel/planning, so we'd have to split it first
            label_description="$(gh api graphql -F owner="neurobagel" -F name="planning" -F label="${{matrix.label}}" -f query='
              query($owner: String!, $name: String!, $label: String!) {
                repository(owner: $owner, name: $name) {
                  label(name: $label) {
                    description
                  }
                }
              }
            ' --jq '.data.repository.label.description')"

            label_color="$(gh api graphql -F owner="neurobagel" -F name="planning" -F label="${{matrix.label}}" -f query='
              query($owner: String!, $name: String!, $label: String!) {
                repository(owner: $owner, name: $name) {
                  label(name: $label) {
                    color
                  }
                }
              }
            ' --jq '.data.repository.label.color')"

            echo "description=${label_description}" >> $GITHUB_OUTPUT
            echo "color=${label_color}" >> $GITHUB_OUTPUT

      - name: sync label
        env:
          MAX_REPO: 100
        run: |
          for repo in $(gh repo list $GITHUB_REPOSITORY_OWNER --no-archived -L ${MAX_REPO} --json owner,name --jq '.[] | "\(.owner.login)/\(.name)"');
          do
          
            echo -e "\nSyncing label ${{matrix.label}} to ${repo}!"
            
            # We escape grep's nonzero exit status here
            out=$(gh label list -R "${repo}" -L 100 | grep -w "${{ matrix.label }}" || echo "")
            
            if [ -z "${out}" ]; then
              # Label missing
              echo I am creating label: "${{matrix.label}}" for ${repo}
              gh label create -R "${repo}" "${{matrix.label}}" --color "${{ steps.read_label.outputs.color }}" --description "${{ steps.read_label.outputs.description }}"
            
            else
              # Label exists missing
              echo I am updating label: "${{matrix.label}}" for ${repo}
              gh label edit -R "${repo}" "${{matrix.label}}" --color "${{ steps.read_label.outputs.color }}" --description "${{ steps.read_label.outputs.description }}"
            fi
          done
